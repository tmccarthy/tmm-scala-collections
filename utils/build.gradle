plugins {
    id 'scala'
    id 'com.github.maiflai.scalatest' version '0.19'
    id "org.scoverage" version "2.1.0"
}

apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: au.id.tmm.tmmUtils.build.MyReleasePlugin.class

repositories {
    mavenCentral()
}

idea.module {
    inheritOutputDirs = true
}

dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"

    compile 'com.google.guava:guava:19.0'
    compile "com.jsuereth:scala-arm${s}:2.0"
    compile "org.typelevel:spire${s}:0.14.1"
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.apache.commons:commons-lang3:3.7'

    testCompile project(':tmm-test-utils')
    testCompile "org.scalatest:scalatest${s}:${scalaTestVersion}"
    testCompile "org.scalamock:scalamock-scalatest-support${s}:3.6.0"
    testCompile 'org.slf4j:slf4j-simple:1.7.25'

    // Needed to produce scalatest report
    testRuntime 'org.pegdown:pegdown:1.4.2'

    scoverage "org.scoverage:scalac-scoverage-plugin${s}:$scoverageVersion"
    scoverage "org.scoverage:scalac-scoverage-runtime${s}:$scoverageVersion"

    zinc "com.typesafe.zinc:zinc:$zincVersion"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        additionalParameters = [
                '-deprecation',                      // Emit warning and location for usages of deprecated APIs.
                '-encoding', 'utf-8',                // Specify character encoding used by source files.
                '-explaintypes',                     // Explain type errors in more detail.
                '-feature',                          // Emit warning and location for usages of features that should be imported explicitly.
                '-language:existentials',            // Existential types (besides wildcard types) can be written and inferred
                '-language:experimental.macros',     // Allow macro definition (besides implementation and application)
                '-language:higherKinds',             // Allow higher-kinded types
                '-language:implicitConversions',     // Allow definition of implicit functions called views
                '-unchecked',                        // Enable additional warnings where generated code depends on assumptions.
                '-Xcheckinit',                       // Wrap field accessors to throw an exception on uninitialized access.
                '-Xfatal-warnings',                  // Fail the compilation if there are any warnings.
                '-Xfuture',                          // Turn on future language features.
                '-Xlint:by-name-right-associative',  // By-name parameter of right associative operator.
                '-Xlint:constant',                   // Evaluation of a constant arithmetic expression results in an error.
                '-Xlint:delayedinit-select',         // Selecting member of DelayedInit.
                '-Xlint:doc-detached',               // A Scaladoc comment appears to be detached from its element.
                '-Xlint:inaccessible',               // Warn about inaccessible types in method signatures.
                '-Xlint:infer-any',                  // Warn when a type argument is inferred to be `Any`.
                '-Xlint:nullary-override',           // Warn when non-nullary `def f()' overrides nullary `def f'.
                '-Xlint:nullary-unit',               // Warn when nullary methods return Unit.
                '-Xlint:option-implicit',            // Option.apply used implicit view.
                '-Xlint:package-object-classes',     // Class or object defined in package object.
                '-Xlint:poly-implicit-overload',     // Parameterized overloaded implicit methods are not visible as view bounds.
                '-Xlint:private-shadow',             // A private field (or class parameter) shadows a superclass field.
                '-Xlint:stars-align',                // Pattern sequence wildcard must align with sequence component.
                '-Xlint:type-parameter-shadow',      // A local type parameter shadows a type already in scope.
                '-Xlint:unsound-match',              // Pattern match may not be typesafe.
                '-Ypartial-unification',             // Enable partial unification in type constructor inference
                '-Ywarn-extra-implicit',             // Warn when more than one implicit parameter section is defined.
                '-Ywarn-inaccessible',               // Warn about inaccessible types in method signatures.
                '-Ywarn-infer-any',                  // Warn when a type argument is inferred to be `Any`.
                '-Ywarn-nullary-override',           // Warn when non-nullary `def f()' overrides nullary `def f'.
                '-Ywarn-nullary-unit',               // Warn when nullary methods return Unit.
                '-Ywarn-unused:imports',             // Warn if an import selector is not referenced.
                '-Ywarn-unused:locals',              // Warn if a local definition is unused.
                '-Ywarn-unused:privates',            // Warn if a private member is unused.
                '-Ywarn-value-discard',              // Warn when non-Unit expression results are unused.
        ]
    }
}

compileScoverageScala.shouldRunAfter(test)

scoverage {
    coverageOutputCobertura = false
}

checkScoverage {
    minimumRate = 0.95d
}

check.dependsOn(checkScoverage)

description = 'A small set of Scala utilities'

myRelease {
    githubUser = 'tmccarthy'
    githubRepoName = 'tmmUtils'

    licenceName = 'BSD 3-Clause'
    licenceUrl = 'https://opensource.org/licenses/BSD-3-Clause'

    developerName = 'Timothy McCarthy'
    developerEmail = 'ebh042@gmail.com'
}
